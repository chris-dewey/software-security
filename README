Artemis Financial is a financial services company that has been looking to expand their offerings to include a portfolio evaluation tool for their customers. The tool will be accessible by their customers and their employees via an internet browser. Artemis may use a third-party web service to do this already, but they have some specific requirements that makes the development of a proprietary application necessary. The application is required to be secure for numerous reasons and in numerous ways. Application security, is also a requirement set by the financial regulatory agencies and is enforced strictly. The application will be primarily written in Java and utilize the Spring Boot Framework. All dependencies and libraries require vulnerability evaluation, code analysis such as input validation, and proper encapsulation. Since the application is going to be hosted on the internet, data in transit and data at rest must be encrypted and employ secure communication protocols, such as SSL/TLS to prevent data and privacy breaches.

I performed static and manual vulnerability analysis of their starting dependencies. Manually, using the dependency’s official documentation and release notes, I could identify which dependencies needed to be updated and how the vulnerabilities previous versions could impact the application. I performed static testing with the OWASP tool and referenced NIST and OSS databases to determine threat levels and hide false positives. Often reading these materials can lead down a rabbit hole of information that does not directly answer the question, “Is this vulnerability an actual threat to my application?” This was also a challenge because I was blind to many of the ways the application would interact with other devices, how dependencies would be used, protocols that would or would not be used, and what kind of web server would be used (Cloud, hybrid-cloud, on prem, etc.).

Cryptography is implemented through hash functions to generate checksums, self-signed certificates, TLS handshakes, data at rest/DBMS encryption, and data-in-transit encryption. I selected SHA2-256 hash functions, AES 256 symmetric encryption ciphers, and RSA 2048 asymmetric encryption for TLS. In a development environment, SSL certificates that are self-signed are totally okay, but once pushed to production, a trusted Certificate Authority should be used to allow for absolute integrity checks and better build customer trust.
As each security implementation iteration was made, it was critical (and will continue to be) to regularly check the code and the dependencies, through manual and static testing methods, that were added for newly introduced vulnerabilities. Getting into this habit at an early stage prevents the possibility of having to totally rewrite the application or spend huge amounts of time refactoring the codebase later in the SDLC.

Even though Artemis Financial is a fictitious company, this scenario is a great way to practice writing secure, readable, and reusable code. Until now, I spent a considerable amount of time practicing in Java, learning new frameworks, and APIs, but I never had a chance to tinker with the Spring framework. While I find JavaScript, NodeJS, Express, and React to be more realistic for web application development. It is always neat to experiment with different languages to do things that would be performed in different environments. Knowing cryptographic methods and the differences between asymmetric ciphers, symmetric ciphers, and hash functions is important and will be tools that I reach for regularly in my future career!  
